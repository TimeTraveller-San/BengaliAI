02/09/2020 01:25:24 AM

---------------- [LOGS for mixup_alpha_2] ----------------
02/09/2020 01:26:29 AM Freezing model
02/09/2020 01:26:29 AM Project path: test_1/mixup_alpha_2
02/09/2020 01:26:29 AM Model: se_resnext50_32x4d
02/09/2020 01:26:29 AM Model class: <class 'model.ClassifierCNN'>
02/09/2020 01:26:29 AM Debug: False
02/09/2020 01:26:29 AM Batch size: 32
02/09/2020 01:26:29 AM LR: 0.0003
02/09/2020 01:26:29 AM Optimizer: <class 'torch.optim.adam.Adam'>
02/09/2020 01:26:29 AM Weights: [0.5 | 0.25 | 0.25]
02/09/2020 01:26:29 AM Activation: None
02/09/2020 01:26:29 AM Mixup: True
02/09/2020 01:26:29 AM Cutmix: False
02/09/2020 01:26:29 AM Train dataset: <loaddata.BengaliAI object at 0x7f05f86dd668>
02/09/2020 01:26:29 AM Validation dataset: <loaddata.BengaliAI object at 0x7f05f86dd438>
02/09/2020 01:26:29 AM Continue: False
02/09/2020 01:26:29 AM Model: ClassifierCNN(
  (first): Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (model): SENet(
    (layer0): Sequential(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    )
    (layer1): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer2): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (3): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer3): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (3): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (4): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (5): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer4): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (avg_pool): AvgPool2d(kernel_size=7, stride=1, padding=0)
    (last_linear): Linear(in_features=2048, out_features=1000, bias=True)
  )
  (head_grapheme_root): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=168, bias=True)
  )
  (head_vowel_diacritic): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=11, bias=True)
  )
  (head_consonant_diacritic): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=7, bias=True)
  )
)
02/09/2020 01:26:29 AM ------------------------------------------------------------
02/09/2020 01:26:29 AM Starting training...
02/09/2020 01:26:42 AM [1/30] | t | R: 0.067 | [0.008 | 0.111 | 0.141] | A: [2.746% | 17.330% | 58.807%] | L: 3.415 | [5.056 | 2.222 | 1.324]
02/09/2020 01:26:47 AM [1/30] | v | R: 0.080 | [0.009 | 0.149 | 0.153] | A: [3.125% | 25.000% | 62.027%] | L: 3.202 | [4.749 | 2.088 | 1.223]
02/09/2020 01:26:49 AM [1/30] | v | R: 0.076 | [0.006 | 0.147 | 0.144] | A: [2.373% | 23.112% | 62.015%] | L: 3.224 | [4.804 | 2.098 | 1.190]
02/09/2020 01:26:49 AM Unfreezing model
02/09/2020 01:27:06 AM [2/30] | t | R: 0.108 | [0.016 | 0.224 | 0.175] | A: [3.930% | 31.155% | 61.600%] | L: 3.093 | [4.679 | 1.857 | 1.155]
02/09/2020 01:27:11 AM [2/30] | v | R: 0.260 | [0.068 | 0.483 | 0.421] | A: [13.305% | 61.269% | 66.998%] | L: 2.546 | [3.993 | 1.256 | 0.943]
02/09/2020 01:27:12 AM [2/30] | v | R: 0.227 | [0.048 | 0.399 | 0.412] | A: [10.277% | 58.489% | 68.082%] | L: 2.692 | [4.284 | 1.275 | 0.924]
02/09/2020 01:27:29 AM [3/30] | t | R: 0.175 | [0.041 | 0.274 | 0.344] | A: [8.191% | 37.500% | 63.210%] | L: 2.793 | [4.270 | 1.619 | 1.016]
02/09/2020 01:27:34 AM [3/30] | v | R: 0.388 | [0.154 | 0.573 | 0.674] | A: [25.900% | 66.572% | 77.983%] | L: 2.033 | [3.227 | 0.999 | 0.678]
02/09/2020 01:27:36 AM [3/30] | v | R: 0.352 | [0.092 | 0.545 | 0.680] | A: [18.516% | 64.773% | 78.192%] | L: 2.324 | [3.804 | 1.022 | 0.664]
02/09/2020 01:27:53 AM [4/30] | t | R: 0.239 | [0.094 | 0.346 | 0.421] | A: [15.246% | 43.987% | 64.299%] | L: 2.532 | [3.853 | 1.498 | 0.926]
02/09/2020 01:27:58 AM [4/30] | v | R: 0.535 | [0.314 | 0.723 | 0.789] | A: [45.644% | 78.078% | 85.133%] | L: 1.470 | [2.298 | 0.792 | 0.491]
02/09/2020 01:27:59 AM [4/30] | v | R: 0.454 | [0.177 | 0.679 | 0.781] | A: [30.064% | 74.866% | 85.144%] | L: 1.906 | [3.143 | 0.854 | 0.482]
02/09/2020 01:28:00 AM Saving model test_1/mixup_alpha_2/best.pth
02/09/2020 01:28:17 AM [5/30] | t | R: 0.309 | [0.176 | 0.405 | 0.481] | A: [24.953% | 48.343% | 66.430%] | L: 2.261 | [3.397 | 1.392 | 0.860]
02/09/2020 01:28:22 AM [5/30] | v | R: 0.627 | [0.482 | 0.755 | 0.790] | A: [62.453% | 81.203% | 85.985%] | L: 1.096 | [1.620 | 0.681 | 0.461]
02/09/2020 01:28:23 AM [5/30] | v | R: 0.485 | [0.231 | 0.705 | 0.774] | A: [36.481% | 77.975% | 85.678%] | L: 1.687 | [2.743 | 0.767 | 0.495]
02/09/2020 01:28:28 AM Saving model test_1/mixup_alpha_2/best.pth
02/09/2020 01:28:45 AM [6/30] | t | R: 0.346 | [0.218 | 0.431 | 0.518] | A: [29.261% | 49.053% | 67.093%] | L: 2.041 | [3.016 | 1.326 | 0.805]
02/09/2020 01:28:50 AM [6/30] | v | R: 0.745 | [0.634 | 0.855 | 0.857] | A: [75.710% | 88.494% | 89.678%] | L: 0.796 | [1.138 | 0.547 | 0.362]
02/09/2020 01:28:51 AM [6/30] | v | R: 0.538 | [0.320 | 0.710 | 0.803] | A: [45.822% | 80.180% | 86.781%] | L: 1.463 | [2.378 | 0.669 | 0.424]
02/09/2020 01:28:56 AM Saving model test_1/mixup_alpha_2/best.pth
02/09/2020 01:29:13 AM [7/30] | t | R: 0.349 | [0.246 | 0.405 | 0.500] | A: [31.581% | 47.917% | 66.619%] | L: 1.934 | [2.832 | 1.297 | 0.778]
02/09/2020 01:29:18 AM [7/30] | v | R: 0.806 | [0.737 | 0.855 | 0.897] | A: [82.765% | 88.210% | 91.809%] | L: 0.628 | [0.847 | 0.488 | 0.331]
02/09/2020 01:29:19 AM [7/30] | v | R: 0.533 | [0.316 | 0.701 | 0.798] | A: [45.488% | 79.445% | 87.333%] | L: 1.397 | [2.265 | 0.646 | 0.412]
02/09/2020 01:29:36 AM [8/30] | t | R: 0.369 | [0.278 | 0.432 | 0.489] | A: [34.706% | 48.580% | 66.619%] | L: 1.807 | [2.629 | 1.236 | 0.733]
02/09/2020 01:29:41 AM [8/30] | v | R: 0.830 | [0.785 | 0.848 | 0.903] | A: [86.411% | 88.494% | 93.182%] | L: 0.558 | [0.724 | 0.467 | 0.315]
02/09/2020 01:29:43 AM [8/30] | v | R: 0.545 | [0.352 | 0.678 | 0.799] | A: [51.354% | 77.807% | 88.620%] | L: 1.370 | [2.195 | 0.678 | 0.411]
02/09/2020 01:30:00 AM [9/30] | t | R: 0.401 | [0.308 | 0.455 | 0.534] | A: [37.121% | 51.278% | 67.992%] | L: 1.801 | [2.622 | 1.232 | 0.729]
02/09/2020 01:30:04 AM [9/30] | v | R: 0.863 | [0.844 | 0.894 | 0.871] | A: [90.814% | 91.288% | 92.992%] | L: 0.435 | [0.541 | 0.381 | 0.275]
02/09/2020 01:30:06 AM [9/30] | v | R: 0.579 | [0.363 | 0.762 | 0.827] | A: [52.122% | 83.489% | 89.171%] | L: 1.265 | [2.061 | 0.566 | 0.371]
02/09/2020 01:30:06 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_9.pth
02/09/2020 01:30:23 AM [10/30] | t | R: 0.424 | [0.349 | 0.481 | 0.517] | A: [40.956% | 53.504% | 68.040%] | L: 1.703 | [2.452 | 1.195 | 0.711]
02/09/2020 01:30:28 AM [10/30] | v | R: 0.911 | [0.887 | 0.941 | 0.928] | A: [93.134% | 94.792% | 94.366%] | L: 0.403 | [0.484 | 0.373 | 0.270]
02/09/2020 01:30:29 AM [10/30] | v | R: 0.597 | [0.382 | 0.801 | 0.822] | A: [54.662% | 84.576% | 89.723%] | L: 1.255 | [2.036 | 0.580 | 0.367]
02/09/2020 01:30:46 AM [11/30] | t | R: 0.445 | [0.378 | 0.484 | 0.539] | A: [43.182% | 53.504% | 68.513%] | L: 1.626 | [2.338 | 1.140 | 0.690]
02/09/2020 01:30:51 AM [11/30] | v | R: 0.907 | [0.878 | 0.938 | 0.936] | A: [92.803% | 95.360% | 96.117%] | L: 0.310 | [0.375 | 0.286 | 0.204]
02/09/2020 01:30:52 AM [11/30] | v | R: 0.624 | [0.404 | 0.808 | 0.881] | A: [56.317% | 86.213% | 92.647%] | L: 1.153 | [1.902 | 0.510 | 0.296]
02/09/2020 01:30:57 AM Saving model test_1/mixup_alpha_2/best.pth
02/09/2020 01:31:14 AM [12/30] | t | R: 0.417 | [0.337 | 0.474 | 0.518] | A: [40.341% | 52.841% | 68.324%] | L: 1.679 | [2.419 | 1.171 | 0.706]
02/09/2020 01:31:19 AM [12/30] | v | R: 0.908 | [0.882 | 0.941 | 0.925] | A: [92.992% | 95.597% | 94.981%] | L: 0.326 | [0.396 | 0.293 | 0.220]
02/09/2020 01:31:20 AM [12/30] | v | R: 0.609 | [0.400 | 0.794 | 0.842] | A: [55.431% | 85.328% | 89.906%] | L: 1.160 | [1.913 | 0.496 | 0.318]
02/09/2020 01:31:20 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_12.pth
02/09/2020 01:31:37 AM [13/30] | t | R: 0.431 | [0.347 | 0.455 | 0.574] | A: [41.477% | 52.604% | 71.259%] | L: 1.737 | [2.509 | 1.220 | 0.712]
02/09/2020 01:31:42 AM [13/30] | v | R: 0.899 | [0.865 | 0.929 | 0.939] | A: [92.045% | 94.223% | 96.259%] | L: 0.360 | [0.455 | 0.300 | 0.229]
02/09/2020 01:31:43 AM [13/30] | v | R: 0.604 | [0.365 | 0.815 | 0.873] | A: [52.122% | 85.311% | 91.912%] | L: 1.240 | [2.054 | 0.515 | 0.335]
02/09/2020 01:32:00 AM [14/30] | t | R: 0.429 | [0.346 | 0.493 | 0.530] | A: [40.862% | 53.220% | 69.460%] | L: 1.646 | [2.364 | 1.152 | 0.706]
02/09/2020 01:32:05 AM [14/30] | v | R: 0.937 | [0.919 | 0.943 | 0.967] | A: [95.312% | 94.366% | 96.686%] | L: 0.296 | [0.347 | 0.294 | 0.198]
02/09/2020 01:32:06 AM [14/30] | v | R: 0.604 | [0.380 | 0.801 | 0.854] | A: [53.927% | 82.553% | 91.728%] | L: 1.200 | [1.968 | 0.538 | 0.327]
02/09/2020 01:32:23 AM [15/30] | t | R: 0.470 | [0.400 | 0.504 | 0.575] | A: [45.076% | 54.545% | 70.833%] | L: 1.479 | [2.115 | 1.059 | 0.628]
02/09/2020 01:32:28 AM [15/30] | v | R: 0.947 | [0.946 | 0.951 | 0.945] | A: [96.875% | 96.070% | 97.159%] | L: 0.234 | [0.271 | 0.229 | 0.165]
02/09/2020 01:32:30 AM [15/30] | v | R: 0.645 | [0.437 | 0.835 | 0.871] | A: [58.489% | 86.965% | 92.112%] | L: 1.116 | [1.855 | 0.469 | 0.284]
02/09/2020 01:32:30 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_15.pth
02/09/2020 01:32:47 AM [16/30] | t | R: 0.524 | [0.475 | 0.556 | 0.589] | A: [52.888% | 60.606% | 73.532%] | L: 1.461 | [2.079 | 1.059 | 0.628]
02/09/2020 01:32:52 AM [16/30] | v | R: 0.955 | [0.943 | 0.961 | 0.973] | A: [96.733% | 96.875% | 97.443%] | L: 0.230 | [0.262 | 0.218 | 0.179]
02/09/2020 01:32:53 AM [16/30] | v | R: 0.629 | [0.421 | 0.823 | 0.850] | A: [57.771% | 87.166% | 90.993%] | L: 1.127 | [1.867 | 0.456 | 0.317]
02/09/2020 01:33:10 AM [17/30] | t | R: 0.431 | [0.361 | 0.470 | 0.530] | A: [40.388% | 51.089% | 67.282%] | L: 1.388 | [1.966 | 1.008 | 0.612]
02/09/2020 01:33:15 AM [17/30] | v | R: 0.956 | [0.938 | 0.981 | 0.968] | A: [96.307% | 97.775% | 97.869%] | L: 0.226 | [0.271 | 0.206 | 0.154]
02/09/2020 01:33:16 AM [17/30] | v | R: 0.601 | [0.406 | 0.753 | 0.840] | A: [55.949% | 82.420% | 91.377%] | L: 1.150 | [1.903 | 0.500 | 0.297]
02/09/2020 01:33:33 AM [18/30] | t | R: 0.464 | [0.397 | 0.509 | 0.552] | A: [43.939% | 55.587% | 70.407%] | L: 1.421 | [2.026 | 1.013 | 0.620]
02/09/2020 01:33:38 AM [18/30] | v | R: 0.964 | [0.960 | 0.962 | 0.975] | A: [97.633% | 97.017% | 98.627%] | L: 0.196 | [0.219 | 0.209 | 0.135]
02/09/2020 01:33:40 AM [18/30] | v | R: 0.640 | [0.437 | 0.815 | 0.871] | A: [59.057% | 86.447% | 92.848%] | L: 1.093 | [1.820 | 0.470 | 0.262]
02/09/2020 01:33:40 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_18.pth
02/09/2020 01:33:57 AM [19/30] | t | R: 0.494 | [0.435 | 0.519 | 0.589] | A: [49.148% | 57.765% | 72.491%] | L: 1.421 | [2.021 | 1.036 | 0.608]
02/09/2020 01:34:02 AM [19/30] | v | R: 0.957 | [0.950 | 0.963 | 0.965] | A: [96.970% | 97.396% | 98.201%] | L: 0.191 | [0.211 | 0.197 | 0.147]
02/09/2020 01:34:03 AM [19/30] | v | R: 0.631 | [0.416 | 0.824 | 0.869] | A: [55.949% | 87.366% | 92.112%] | L: 1.158 | [1.920 | 0.491 | 0.302]
02/09/2020 01:34:20 AM [20/30] | t | R: 0.418 | [0.342 | 0.464 | 0.525] | A: [38.826% | 50.000% | 69.555%] | L: 1.453 | [2.071 | 1.048 | 0.623]
02/09/2020 01:34:25 AM [20/30] | v | R: 0.968 | [0.954 | 0.980 | 0.985] | A: [97.396% | 98.295% | 98.437%] | L: 0.181 | [0.200 | 0.187 | 0.137]
02/09/2020 01:34:26 AM [20/30] | v | R: 0.626 | [0.415 | 0.810 | 0.864] | A: [55.932% | 86.430% | 91.193%] | L: 1.149 | [1.910 | 0.488 | 0.289]
02/09/2020 01:34:43 AM [21/30] | t | R: 0.460 | [0.397 | 0.490 | 0.557] | A: [44.508% | 53.504% | 71.070%] | L: 1.467 | [2.091 | 1.065 | 0.623]
02/09/2020 01:34:48 AM [21/30] | v | R: 0.965 | [0.951 | 0.982 | 0.977] | A: [97.254% | 98.248% | 98.106%] | L: 0.201 | [0.233 | 0.194 | 0.142]
02/09/2020 01:34:50 AM [21/30] | v | R: 0.635 | [0.434 | 0.793 | 0.879] | A: [57.019% | 86.263% | 92.096%] | L: 1.151 | [1.898 | 0.517 | 0.290]
02/09/2020 01:34:50 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_21.pth
02/09/2020 01:35:07 AM [22/30] | t | R: 0.459 | [0.391 | 0.502 | 0.552] | A: [46.165% | 54.640% | 70.739%] | L: 1.446 | [2.059 | 1.044 | 0.620]
02/09/2020 01:35:12 AM [22/30] | v | R: 0.963 | [0.952 | 0.964 | 0.984] | A: [97.301% | 96.307% | 98.201%] | L: 0.192 | [0.220 | 0.201 | 0.127]
02/09/2020 01:35:13 AM [22/30] | v | R: 0.627 | [0.428 | 0.792 | 0.861] | A: [58.322% | 83.322% | 91.928%] | L: 1.122 | [1.838 | 0.534 | 0.277]
02/09/2020 01:35:30 AM [23/30] | t | R: 0.458 | [0.396 | 0.495 | 0.544] | A: [44.744% | 54.498% | 70.455%] | L: 1.421 | [2.020 | 1.026 | 0.620]
02/09/2020 01:35:35 AM [23/30] | v | R: 0.967 | [0.969 | 0.970 | 0.959] | A: [98.059% | 97.206% | 97.869%] | L: 0.176 | [0.200 | 0.172 | 0.134]
02/09/2020 01:35:36 AM [23/30] | v | R: 0.624 | [0.432 | 0.790 | 0.843] | A: [58.138% | 86.247% | 91.928%] | L: 1.113 | [1.851 | 0.461 | 0.287]
02/09/2020 01:35:53 AM [24/30] | t | R: 0.437 | [0.370 | 0.470 | 0.541] | A: [43.134% | 52.273% | 69.508%] | L: 1.419 | [2.005 | 1.053 | 0.613]
02/09/2020 01:35:58 AM [24/30] | v | R: 0.964 | [0.961 | 0.969 | 0.968] | A: [98.011% | 97.585% | 98.153%] | L: 0.170 | [0.182 | 0.186 | 0.129]
02/09/2020 01:35:59 AM [24/30] | v | R: 0.616 | [0.403 | 0.821 | 0.837] | A: [56.150% | 84.241% | 92.112%] | L: 1.124 | [1.852 | 0.526 | 0.266]
02/09/2020 01:36:00 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_24.pth
02/09/2020 01:36:17 AM [25/30] | t | R: 0.369 | [0.288 | 0.419 | 0.483] | A: [35.227% | 47.443% | 65.530%] | L: 1.417 | [2.005 | 1.049 | 0.607]
02/09/2020 01:36:21 AM [25/30] | v | R: 0.969 | [0.964 | 0.977 | 0.970] | A: [98.106% | 97.964% | 98.201%] | L: 0.148 | [0.157 | 0.155 | 0.124]
02/09/2020 01:36:23 AM [25/30] | v | R: 0.627 | [0.411 | 0.819 | 0.866] | A: [56.300% | 87.149% | 92.279%] | L: 1.133 | [1.890 | 0.480 | 0.274]
02/09/2020 01:36:40 AM [26/30] | t | R: 0.413 | [0.336 | 0.465 | 0.516] | A: [40.009% | 51.705% | 68.703%] | L: 1.433 | [2.033 | 1.030 | 0.637]
02/09/2020 01:36:45 AM [26/30] | v | R: 0.980 | [0.975 | 0.982 | 0.987] | A: [98.674% | 98.011% | 98.674%] | L: 0.150 | [0.152 | 0.166 | 0.128]
02/09/2020 01:36:46 AM [26/30] | v | R: 0.648 | [0.439 | 0.820 | 0.893] | A: [59.241% | 86.247% | 92.463%] | L: 1.099 | [1.810 | 0.466 | 0.310]
02/09/2020 01:37:03 AM [27/30] | t | R: 0.450 | [0.384 | 0.484 | 0.549] | A: [44.176% | 53.977% | 70.644%] | L: 1.364 | [1.921 | 1.006 | 0.609]
02/09/2020 01:37:08 AM [27/30] | v | R: 0.977 | [0.977 | 0.980 | 0.975] | A: [98.769% | 97.917% | 97.822%] | L: 0.151 | [0.158 | 0.161 | 0.127]
02/09/2020 01:37:10 AM [27/30] | v | R: 0.650 | [0.441 | 0.854 | 0.862] | A: [58.673% | 89.171% | 92.296%] | L: 1.076 | [1.802 | 0.428 | 0.273]
02/09/2020 01:37:10 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_27.pth
02/09/2020 01:37:27 AM [28/30] | t | R: 0.469 | [0.413 | 0.498 | 0.551] | A: [46.402% | 54.498% | 70.312%] | L: 1.284 | [1.805 | 0.952 | 0.573]
02/09/2020 01:37:32 AM [28/30] | v | R: 0.978 | [0.977 | 0.982 | 0.977] | A: [98.722% | 98.485% | 98.437%] | L: 0.132 | [0.138 | 0.133 | 0.117]
02/09/2020 01:37:33 AM [28/30] | v | R: 0.652 | [0.448 | 0.837 | 0.874] | A: [60.160% | 87.500% | 91.928%] | L: 1.048 | [1.745 | 0.422 | 0.278]
02/09/2020 01:37:50 AM [29/30] | t | R: 0.502 | [0.444 | 0.528 | 0.593] | A: [50.331% | 57.481% | 72.396%] | L: 1.311 | [1.840 | 0.969 | 0.596]
02/09/2020 01:37:55 AM [29/30] | v | R: 0.967 | [0.971 | 0.967 | 0.960] | A: [98.437% | 97.964% | 98.059%] | L: 0.135 | [0.138 | 0.147 | 0.117]
02/09/2020 01:37:57 AM [29/30] | v | R: 0.638 | [0.452 | 0.792 | 0.857] | A: [61.080% | 84.943% | 92.480%] | L: 1.077 | [1.781 | 0.469 | 0.277]
02/09/2020 01:38:14 AM [30/30] | t | R: 0.498 | [0.442 | 0.530 | 0.580] | A: [49.811% | 56.960% | 71.591%] | L: 1.289 | [1.797 | 0.974 | 0.591]
02/09/2020 01:38:19 AM [30/30] | v | R: 0.977 | [0.976 | 0.975 | 0.981] | A: [98.674% | 98.201% | 98.201%] | L: 0.139 | [0.148 | 0.149 | 0.112]
02/09/2020 01:38:20 AM [30/30] | v | R: 0.625 | [0.425 | 0.795 | 0.854] | A: [57.955% | 86.063% | 91.745%] | L: 1.102 | [1.833 | 0.460 | 0.283]
02/09/2020 01:38:20 AM Saving model test_1/mixup_alpha_2/mixup_alpha_2_30.pth
