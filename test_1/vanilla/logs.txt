02/09/2020 12:28:56 AM

---------------- [LOGS for vanilla] ----------------
02/09/2020 12:30:35 AM

---------------- [LOGS for vanilla] ----------------
02/09/2020 12:32:19 AM

---------------- [LOGS for vanilla] ----------------
02/09/2020 12:33:18 AM Freezing model
02/09/2020 12:33:18 AM Project path: test_1/vanilla
02/09/2020 12:33:18 AM Model: se_resnext50_32x4d
02/09/2020 12:33:18 AM Model class: <class 'model.ClassifierCNN'>
02/09/2020 12:33:18 AM Debug: False
02/09/2020 12:33:18 AM Batch size: 32
02/09/2020 12:33:18 AM LR: 0.0003
02/09/2020 12:33:18 AM Optimizer: <class 'torch.optim.adam.Adam'>
02/09/2020 12:33:18 AM Weights: [0.5 | 0.25 | 0.25]
02/09/2020 12:33:18 AM Activation: None
02/09/2020 12:33:18 AM Mixup: False
02/09/2020 12:33:18 AM Cutmix: False
02/09/2020 12:33:18 AM Train dataset: <loaddata.BengaliAI object at 0x7fa9ecf7a7f0>
02/09/2020 12:33:18 AM Validation dataset: <loaddata.BengaliAI object at 0x7fa9ecf7aa20>
02/09/2020 12:33:18 AM Continue: False
02/09/2020 12:33:18 AM Model: ClassifierCNN(
  (first): Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (model): SENet(
    (layer0): Sequential(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    )
    (layer1): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer2): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (3): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(32, 512, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer3): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (3): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (4): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (5): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(1024, 64, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(64, 1024, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (layer4): Sequential(
      (0): SEResNeXtBottleneck(
        (conv1): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): SEResNeXtBottleneck(
        (conv1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
      (2): SEResNeXtBottleneck(
        (conv1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (bn2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se_module): SEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc1): Conv2d(2048, 128, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU(inplace=True)
          (fc2): Conv2d(128, 2048, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
        )
      )
    )
    (avg_pool): AvgPool2d(kernel_size=7, stride=1, padding=0)
    (last_linear): Linear(in_features=2048, out_features=1000, bias=True)
  )
  (head_grapheme_root): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=168, bias=True)
  )
  (head_vowel_diacritic): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=11, bias=True)
  )
  (head_consonant_diacritic): AdaptiveHead(
    (pool): GeM(p=3.0000, eps=1e-06)
    (l1): Linear(in_features=2048, out_features=7, bias=True)
  )
)
02/09/2020 12:33:18 AM ------------------------------------------------------------
02/09/2020 12:33:18 AM Starting training...
02/09/2020 12:33:31 AM [1/30] | t | R: 0.076 | [0.009 | 0.141 | 0.146] | A: [2.699% | 22.112% | 58.759%] | L: 3.357 | [5.005 | 2.119 | 1.299]
02/09/2020 12:33:32 AM [1/30] | v | R: 0.094 | [0.008 | 0.223 | 0.137] | A: [2.941% | 35.211% | 60.561%] | L: 3.158 | [4.775 | 1.933 | 1.147]
02/09/2020 12:33:32 AM Unfreezing model
02/09/2020 12:33:49 AM [2/30] | t | R: 0.229 | [0.051 | 0.402 | 0.413] | A: [10.511% | 52.699% | 67.377%] | L: 2.694 | [4.202 | 1.427 | 0.946]
02/09/2020 12:33:50 AM [2/30] | v | R: 0.363 | [0.090 | 0.570 | 0.701] | A: [17.597% | 69.519% | 80.197%] | L: 2.268 | [3.760 | 0.975 | 0.577]
02/09/2020 12:34:07 AM [3/30] | t | R: 0.459 | [0.239 | 0.639 | 0.720] | A: [36.127% | 73.864% | 80.776%] | L: 1.646 | [2.620 | 0.793 | 0.551]
02/09/2020 12:34:08 AM [3/30] | v | R: 0.473 | [0.212 | 0.695 | 0.774] | A: [35.027% | 76.537% | 86.063%] | L: 1.703 | [2.850 | 0.695 | 0.417]
02/09/2020 12:34:26 AM [4/30] | t | R: 0.664 | [0.536 | 0.765 | 0.819] | A: [67.472% | 83.239% | 88.542%] | L: 0.850 | [1.278 | 0.509 | 0.334]
02/09/2020 12:34:27 AM [4/30] | v | R: 0.537 | [0.292 | 0.755 | 0.808] | A: [43.466% | 82.019% | 84.241%] | L: 1.525 | [2.516 | 0.561 | 0.507]
02/09/2020 12:34:27 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:34:44 AM [5/30] | t | R: 0.812 | [0.759 | 0.871 | 0.858] | A: [84.991% | 90.672% | 91.714%] | L: 0.418 | [0.564 | 0.293 | 0.250]
02/09/2020 12:34:46 AM [5/30] | v | R: 0.588 | [0.357 | 0.788 | 0.850] | A: [50.251% | 84.943% | 89.355%] | L: 1.295 | [2.168 | 0.452 | 0.391]
02/09/2020 12:34:51 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:35:08 AM [6/30] | t | R: 0.903 | [0.878 | 0.926 | 0.930] | A: [92.945% | 94.413% | 95.028%] | L: 0.232 | [0.294 | 0.187 | 0.152]
02/09/2020 12:35:09 AM [6/30] | v | R: 0.595 | [0.375 | 0.767 | 0.862] | A: [53.192% | 85.862% | 88.636%] | L: 1.277 | [2.131 | 0.465 | 0.382]
02/09/2020 12:35:14 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:35:31 AM [7/30] | t | R: 0.933 | [0.917 | 0.947 | 0.953] | A: [95.028% | 96.307% | 96.875%] | L: 0.153 | [0.195 | 0.129 | 0.094]
02/09/2020 12:35:32 AM [7/30] | v | R: 0.565 | [0.347 | 0.768 | 0.798] | A: [49.365% | 84.576% | 87.366%] | L: 1.334 | [2.235 | 0.479 | 0.387]
02/09/2020 12:35:37 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:35:54 AM [8/30] | t | R: 0.944 | [0.933 | 0.954 | 0.954] | A: [96.165% | 96.638% | 97.443%] | L: 0.127 | [0.153 | 0.120 | 0.081]
02/09/2020 12:35:55 AM [8/30] | v | R: 0.578 | [0.350 | 0.788 | 0.824] | A: [50.618% | 86.046% | 88.252%] | L: 1.317 | [2.173 | 0.499 | 0.422]
02/09/2020 12:36:00 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:36:17 AM [9/30] | t | R: 0.954 | [0.940 | 0.965 | 0.973] | A: [96.638% | 97.348% | 98.201%] | L: 0.098 | [0.125 | 0.081 | 0.061]
02/09/2020 12:36:18 AM [9/30] | v | R: 0.599 | [0.376 | 0.808 | 0.836] | A: [53.192% | 86.230% | 89.723%] | L: 1.352 | [2.286 | 0.487 | 0.347]
02/09/2020 12:36:23 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:36:40 AM [10/30] | t | R: 0.965 | [0.958 | 0.970 | 0.975] | A: [97.396% | 98.248% | 98.201%] | L: 0.085 | [0.107 | 0.064 | 0.061]
02/09/2020 12:36:41 AM [10/30] | v | R: 0.577 | [0.365 | 0.760 | 0.819] | A: [53.025% | 85.495% | 87.333%] | L: 1.396 | [2.297 | 0.545 | 0.446]
02/09/2020 12:36:46 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:37:03 AM [11/30] | t | R: 0.959 | [0.942 | 0.970 | 0.982] | A: [96.686% | 98.343% | 98.343%] | L: 0.085 | [0.112 | 0.060 | 0.055]
02/09/2020 12:37:04 AM [11/30] | v | R: 0.593 | [0.374 | 0.785 | 0.841] | A: [52.306% | 84.943% | 89.906%] | L: 1.362 | [2.283 | 0.532 | 0.352]
02/09/2020 12:37:09 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:37:26 AM [12/30] | t | R: 0.959 | [0.948 | 0.973 | 0.965] | A: [97.206% | 97.633% | 97.822%] | L: 0.084 | [0.105 | 0.072 | 0.055]
02/09/2020 12:37:27 AM [12/30] | v | R: 0.592 | [0.368 | 0.805 | 0.828] | A: [53.209% | 86.046% | 89.723%] | L: 1.379 | [2.328 | 0.532 | 0.329]
02/09/2020 12:37:32 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:37:49 AM [13/30] | t | R: 0.958 | [0.948 | 0.972 | 0.965] | A: [97.112% | 97.869% | 97.490%] | L: 0.089 | [0.109 | 0.064 | 0.076]
02/09/2020 12:37:50 AM [13/30] | v | R: 0.574 | [0.359 | 0.773 | 0.806] | A: [50.401% | 83.289% | 89.171%] | L: 1.572 | [2.600 | 0.599 | 0.490]
02/09/2020 12:37:55 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:38:12 AM [14/30] | t | R: 0.957 | [0.946 | 0.978 | 0.957] | A: [97.112% | 98.059% | 97.633%] | L: 0.089 | [0.103 | 0.074 | 0.074]
02/09/2020 12:38:13 AM [14/30] | v | R: 0.605 | [0.371 | 0.799 | 0.879] | A: [54.462% | 86.247% | 90.090%] | L: 1.291 | [2.180 | 0.454 | 0.352]
02/09/2020 12:38:18 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:38:36 AM [15/30] | t | R: 0.963 | [0.951 | 0.978 | 0.973] | A: [97.348% | 98.295% | 98.485%] | L: 0.075 | [0.095 | 0.062 | 0.048]
02/09/2020 12:38:37 AM [15/30] | v | R: 0.592 | [0.363 | 0.780 | 0.863] | A: [52.089% | 84.041% | 89.906%] | L: 1.403 | [2.332 | 0.514 | 0.434]
02/09/2020 12:38:42 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:38:59 AM [16/30] | t | R: 0.957 | [0.946 | 0.973 | 0.962] | A: [97.017% | 98.295% | 97.917%] | L: 0.079 | [0.101 | 0.052 | 0.062]
02/09/2020 12:39:00 AM [16/30] | v | R: 0.607 | [0.381 | 0.807 | 0.859] | A: [54.111% | 87.533% | 91.377%] | L: 1.380 | [2.317 | 0.495 | 0.392]
02/09/2020 12:39:05 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:39:22 AM [17/30] | t | R: 0.961 | [0.952 | 0.983 | 0.958] | A: [97.064% | 98.864% | 98.011%] | L: 0.079 | [0.110 | 0.043 | 0.054]
02/09/2020 12:39:24 AM [17/30] | v | R: 0.574 | [0.342 | 0.773 | 0.838] | A: [50.635% | 83.690% | 87.884%] | L: 1.521 | [2.560 | 0.506 | 0.461]
02/09/2020 12:39:28 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:39:45 AM [18/30] | t | R: 0.962 | [0.944 | 0.983 | 0.975] | A: [96.733% | 98.864% | 98.201%] | L: 0.080 | [0.113 | 0.041 | 0.054]
02/09/2020 12:39:46 AM [18/30] | v | R: 0.613 | [0.386 | 0.815 | 0.866] | A: [54.479% | 86.781% | 89.539%] | L: 1.409 | [2.336 | 0.505 | 0.460]
02/09/2020 12:39:51 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:40:08 AM [19/30] | t | R: 0.968 | [0.958 | 0.972 | 0.984] | A: [97.727% | 98.201% | 98.674%] | L: 0.068 | [0.083 | 0.055 | 0.049]
02/09/2020 12:40:09 AM [19/30] | v | R: 0.575 | [0.373 | 0.746 | 0.806] | A: [53.910% | 83.138% | 87.350%] | L: 1.526 | [2.464 | 0.645 | 0.530]
02/09/2020 12:40:14 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:40:31 AM [20/30] | t | R: 0.969 | [0.960 | 0.977 | 0.982] | A: [97.964% | 98.201% | 98.769%] | L: 0.061 | [0.074 | 0.053 | 0.040]
02/09/2020 12:40:33 AM [20/30] | v | R: 0.609 | [0.392 | 0.794 | 0.857] | A: [55.030% | 87.149% | 88.269%] | L: 1.375 | [2.253 | 0.499 | 0.492]
02/09/2020 12:40:37 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:40:54 AM [21/30] | t | R: 0.980 | [0.973 | 0.989 | 0.986] | A: [98.627% | 99.384% | 98.958%] | L: 0.048 | [0.063 | 0.031 | 0.037]
02/09/2020 12:40:56 AM [21/30] | v | R: 0.623 | [0.401 | 0.788 | 0.901] | A: [55.765% | 86.982% | 90.090%] | L: 1.356 | [2.197 | 0.502 | 0.527]
02/09/2020 12:41:01 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:41:19 AM [22/30] | t | R: 0.980 | [0.981 | 0.976 | 0.981] | A: [99.006% | 98.390% | 98.816%] | L: 0.044 | [0.049 | 0.045 | 0.031]
02/09/2020 12:41:20 AM [22/30] | v | R: 0.639 | [0.396 | 0.848 | 0.914] | A: [56.133% | 90.090% | 91.578%] | L: 1.380 | [2.329 | 0.434 | 0.428]
02/09/2020 12:41:25 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:41:42 AM [23/30] | t | R: 0.984 | [0.982 | 0.989 | 0.984] | A: [99.006% | 99.290% | 98.958%] | L: 0.033 | [0.036 | 0.030 | 0.031]
02/09/2020 12:41:43 AM [23/30] | v | R: 0.632 | [0.407 | 0.826 | 0.885] | A: [57.052% | 88.453% | 91.009%] | L: 1.375 | [2.324 | 0.407 | 0.448]
02/09/2020 12:41:48 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:42:05 AM [24/30] | t | R: 0.978 | [0.973 | 0.993 | 0.973] | A: [98.437% | 99.526% | 98.674%] | L: 0.048 | [0.064 | 0.019 | 0.044]
02/09/2020 12:42:06 AM [24/30] | v | R: 0.605 | [0.374 | 0.807 | 0.864] | A: [53.175% | 89.188% | 90.274%] | L: 1.444 | [2.448 | 0.437 | 0.446]
02/09/2020 12:42:11 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:42:28 AM [25/30] | t | R: 0.970 | [0.960 | 0.986 | 0.974] | A: [97.822% | 98.958% | 98.532%] | L: 0.059 | [0.077 | 0.036 | 0.046]
02/09/2020 12:42:29 AM [25/30] | v | R: 0.622 | [0.409 | 0.809 | 0.860] | A: [56.651% | 87.182% | 91.009%] | L: 1.364 | [2.295 | 0.506 | 0.359]
02/09/2020 12:42:34 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:42:51 AM [26/30] | t | R: 0.961 | [0.944 | 0.983 | 0.972] | A: [97.017% | 98.816% | 98.153%] | L: 0.076 | [0.105 | 0.036 | 0.056]
02/09/2020 12:42:52 AM [26/30] | v | R: 0.572 | [0.341 | 0.762 | 0.843] | A: [50.084% | 83.673% | 90.826%] | L: 1.638 | [2.722 | 0.568 | 0.540]
02/09/2020 12:42:57 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:43:14 AM [27/30] | t | R: 0.956 | [0.940 | 0.970 | 0.974] | A: [96.591% | 97.869% | 98.343%] | L: 0.093 | [0.127 | 0.065 | 0.052]
02/09/2020 12:43:15 AM [27/30] | v | R: 0.574 | [0.341 | 0.771 | 0.841] | A: [48.780% | 83.857% | 90.475%] | L: 1.763 | [2.951 | 0.684 | 0.466]
02/09/2020 12:43:20 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:43:37 AM [28/30] | t | R: 0.931 | [0.899 | 0.969 | 0.957] | A: [94.223% | 97.538% | 98.059%] | L: 0.154 | [0.237 | 0.074 | 0.070]
02/09/2020 12:43:38 AM [28/30] | v | R: 0.573 | [0.315 | 0.781 | 0.881] | A: [46.207% | 85.328% | 87.517%] | L: 1.855 | [3.120 | 0.644 | 0.536]
02/09/2020 12:43:43 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:44:00 AM [29/30] | t | R: 0.938 | [0.908 | 0.962 | 0.972] | A: [94.839% | 97.727% | 98.201%] | L: 0.115 | [0.168 | 0.070 | 0.055]
02/09/2020 12:44:01 AM [29/30] | v | R: 0.607 | [0.363 | 0.789 | 0.914] | A: [51.003% | 87.517% | 91.578%] | L: 1.621 | [2.783 | 0.553 | 0.364]
02/09/2020 12:44:06 AM Saving model test_1/vanilla/best.pth
02/09/2020 12:44:22 AM [30/30] | t | R: 0.949 | [0.931 | 0.960 | 0.973] | A: [96.070% | 97.396% | 98.627%] | L: 0.104 | [0.143 | 0.086 | 0.045]
02/09/2020 12:44:24 AM [30/30] | v | R: 0.598 | [0.363 | 0.786 | 0.882] | A: [51.738% | 86.414% | 91.561%] | L: 1.549 | [2.634 | 0.510 | 0.419]
02/09/2020 12:44:28 AM Saving model test_1/vanilla/best.pth
